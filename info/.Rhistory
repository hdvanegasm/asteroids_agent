autoplot() +
labs(title = "Curva ROC para el SVC")
svm_poly <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_polynomial$best.parameters$cost,
degree = tune_svm_polynomial$best.parameters$degree,
kernel = "polynomial",
probability = TRUE)
svm_poly_test <- predict(svm_poly, auto_fit_test, probability = TRUE)
roc_poly <- data.frame(
estimate = svm_poly_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_poly_test,"probabilities")[, "1"])
yardstick::roc_curve(roc_poly, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
svm_linear <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svc$best.parameters$cost,
kernel = "linear",
probability = TRUE)
svm_linear_test <- predict(svm_linear, auto_fit_test, probability = TRUE)
roc_linear <- data.frame(
estimate = svm_linear_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_linear_test,"probabilities")[, "1"])
yardstick::roc_curve(roc_linear, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
svm_poly <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_polynomial$best.parameters$cost,
degree = tune_svm_polynomial$best.parameters$degree,
kernel = "polynomial",
probability = TRUE)
svm_poly_test <- predict(svm_poly, auto_fit_test, probability = TRUE)
roc_poly <- data.frame(
estimate = svm_poly_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_poly_test,"probabilities")[, "1"])
yardstick::roc_curve(roc_poly, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
svm_radial <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_radial$best.parameters$cost,
gamma = tune_svm_radial$best.parameters$gamma,
kernel = "radial",
probability = TRUE)
svm_radial_test <- predict(svm_radial, auto_fit_test, probability = TRUE)
roc_radial <- data.frame(
estimate = svm_radial_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_radial_test,"probabilities")[, "1"])
yardstick::roc_curve(roc_radial, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
View(roc_merge)
roc_poly <- data.frame(
estimate = svm_poly_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_poly_test,"probabilities")[, "1"],
model = "Lineal")
View(roc_poly)
svm_linear <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svc$best.parameters$cost,
kernel = "linear",
probability = TRUE)
svm_linear_test <- predict(svm_linear, auto_fit_test, probability = TRUE)
roc_linear <- data.frame(
estimate = svm_linear_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_linear_test,"probabilities")[, "1"],
model = "Lineal")
yardstick::roc_curve(roc_linear, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
svm_poly <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_polynomial$best.parameters$cost,
degree = tune_svm_polynomial$best.parameters$degree,
kernel = "polynomial",
probability = TRUE)
svm_poly_test <- predict(svm_poly, auto_fit_test, probability = TRUE)
roc_poly <- data.frame(
estimate = svm_poly_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_poly_test,"probabilities")[, "1"],
model = "Polinomial")
yardstick::roc_curve(roc_poly, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
svm_radial <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_radial$best.parameters$cost,
gamma = tune_svm_radial$best.parameters$gamma,
kernel = "radial",
probability = TRUE)
svm_radial_test <- predict(svm_radial, auto_fit_test, probability = TRUE)
roc_radial <- data.frame(
estimate = svm_radial_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_radial_test,"probabilities")[, "1"],
model = "Radial")
yardstick::roc_curve(roc_radial, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
View(roc_merge)
roc_merge %>%
group_by(model) %>%
roc_curve(truth, prob) %>%
autoplot()
split_ratio <- 0.75
smp_size <- floor(split_ratio * nrow(auto_fit))
train_ind <- sample(seq_len(nrow(auto_fit)), size = smp_size)
auto_fit_train <- auto_fit[train_ind, ]
auto_fit_test <- auto_fit[-train_ind, ]
svm_linear <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svc$best.parameters$cost,
kernel = "linear",
probability = TRUE)
svm_linear_test <- predict(svm_linear, auto_fit_test, probability = TRUE)
roc_linear <- data.frame(
estimate = svm_linear_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_linear_test,"probabilities")[, "1"],
Modelo = "Lineal")
yardstick::roc_curve(roc_linear, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
svm_poly <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_polynomial$best.parameters$cost,
degree = tune_svm_polynomial$best.parameters$degree,
kernel = "polynomial",
probability = TRUE)
svm_poly_test <- predict(svm_poly, auto_fit_test, probability = TRUE)
roc_poly <- data.frame(
estimate = svm_poly_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_poly_test,"probabilities")[, "1"],
Modelo = "Polinomial")
yardstick::roc_curve(roc_poly, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
svm_radial <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_radial$best.parameters$cost,
gamma = tune_svm_radial$best.parameters$gamma,
kernel = "radial",
probability = TRUE)
svm_radial_test <- predict(svm_radial, auto_fit_test, probability = TRUE)
roc_radial <- data.frame(
estimate = svm_radial_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_radial_test,"probabilities")[, "1"],
Modelo = "Radial")
yardstick::roc_curve(roc_radial, truth, prob) %>%
autoplot() +
labs(title = "Curva ROC para el SVC")
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
roc_merge %>%
group_by(model) %>%
roc_curve(truth, prob) %>%
autoplot()
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot()
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot()
roc_merge %>%
group_by(Modelo) %>%
roc_auc(truth, prob)
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot() %>%
labs(title = "Curvas ROC")
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot() +
labs(title = "Curvas ROC")
plot(tune_svc$best.model, auto_fit, horsepower ~ acceleration,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
displacement = median(auto_fit$displacement),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svc$best.model, auto_fit, horsepower ~ displacement,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
acceleration = median(auto_fit$acceleration),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svc$best.model, auto_fit, horsepower ~ weight,
slice = list(year = median(auto_fit$year),
acceleration = median(auto_fit$acceleration),
displacement = median(auto_fit$displacement),
cylinders = median(auto_fit$cylinders),
origin = 1))
plot(tune_svm_polynomial$best.model, auto_fit, horsepower ~ acceleration,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
displacement = median(auto_fit$displacement),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svm_polynomial$best.model, auto_fit, horsepower ~ weight,
slice = list(year = median(auto_fit$year),
acceleration = median(auto_fit$acceleration),
displacement = median(auto_fit$displacement),
cylinders = median(auto_fit$cylinders),
origin = 1))
plot(tune_svm_polynomial$best.model, auto_fit, horsepower ~ displacement,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
acceleration = median(auto_fit$acceleration),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svm_polynomial$best.model, auto_fit, horsepower ~ displacement,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
acceleration = median(auto_fit$acceleration),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ acceleration,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
displacement = median(auto_fit$displacement),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ weight,
slice = list(year = median(auto_fit$year),
acceleration = median(auto_fit$acceleration),
displacement = median(auto_fit$displacement),
cylinders = median(auto_fit$cylinders),
origin = 1))
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ displacement,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
acceleration = median(auto_fit$acceleration),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ acceleration,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
displacement = median(auto_fit$displacement),
weight = median(auto_fit$weight),
origin = 1))
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ acceleration)
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ acceleration,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
displacement = median(auto_fit$displacement),
weight = median(auto_fit$weight),
origin = 1))
#Librerías
library(tidyverse) # Manipulación, limpieza y gráficos
library(ISLR) # Bases de datos
library(plotly) # Interactividad gráfica
library(ggthemes) # Presentación
library(GGally) # Correlación
library(yardstick) # Métricas
library(MASS) # Clasificadores
library(class) # Clasificadores
library(tree) #CART - ISLR
library(broom) # Resultados tidy de modelos
library(latex2exp) # Expresiones LaTex en las gráficas
library(randomForest) # Libreria para bosques aleatorios
library(gbm) # Boosting
library(pls) # Principal component regression
library(ggforce) # Características adicionales para ggplot
library(e1071) # Maquinas de soporte vectorial
library(caret) # Some models and plots
auto <- as_tibble(Auto)
median_mpg <- median(auto$mpg)
auto <- auto %>% mutate(
mpg01 = case_when(
mpg >= median_mpg ~ 1,
mpg < median_mpg ~ 0
),
mpg01 = as.factor(mpg01),
origin = as.factor(origin)
)
# Retiramos la variable mpg
auto_fit <- auto %>% dplyr::select(-mpg, -name)
head(auto)
set.seed(20)
tune_svc <- tune(svm, mpg01 ~ ., data = auto_fit, kernel = "linear",
ranges = list(cost = seq(from = 0.01, to = 5, by = 0.1)))
summary(tune_svc)
g <- ggplot(data = tune_svc$performances) +
geom_line(mapping = aes(x = cost, y = error)) +
theme_economist() +
labs(title = "Errores respecto al costo", x = "Costo", y = "Error")
ggplotly(g)
set.seed(20)
tune_svm_polynomial <- tune(svm, mpg01 ~ ., data = auto_fit, kernel = "polynomial", probability = TRUE,
ranges = list(cost = seq(from = 0.01, to = 5, by = 0.2),
degree = seq(from = 2, to = 10, by = 1)))
fig <- plot_ly(data = tune_svm_polynomial$performances, x=~cost,y=~degree, z=~ -1/(error ^ 2), type = "contour", colorscale='Jet') %>%
layout(
xaxis = list(title = "Costo"),
yaxis = list(title = "Grado del polinomio"),
title = "Gráfica sobre el ")
fig %>% colorbar(title = "-1/(Error ^ 2)")
set.seed(20)
tune_svm_radial <- tune(svm, mpg01 ~ ., data = auto_fit, kernel = "radial",
ranges = list(cost = seq(from = 0.01, to = 5, by = 0.3),
gamma = seq(from = 0.01, to = 1, by = 0.02)))
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ weight,
slice = list(year = median(auto_fit$year),
acceleration = median(auto_fit$acceleration),
displacement = median(auto_fit$displacement),
cylinders = median(auto_fit$cylinders),
origin = 1))
plot(tune_svm_radial$best.model, auto_fit, horsepower ~ displacement,
slice = list(year = median(auto_fit$year),
cylinders = median(auto_fit$cylinders),
acceleration = median(auto_fit$acceleration),
weight = median(auto_fit$weight),
origin = 1))
split_ratio <- 0.75
smp_size <- floor(split_ratio * nrow(auto_fit))
train_ind <- sample(seq_len(nrow(auto_fit)), size = smp_size)
auto_fit_train <- auto_fit[train_ind, ]
auto_fit_test <- auto_fit[-train_ind, ]
svm_linear <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svc$best.parameters$cost,
kernel = "linear",
probability = TRUE)
svm_linear_test <- predict(svm_linear, auto_fit_test, probability = TRUE)
roc_linear <- data.frame(
estimate = svm_linear_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_linear_test,"probabilities")[, "1"],
Modelo = "Lineal")
head(roc_linear)
svm_poly <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_polynomial$best.parameters$cost,
degree = tune_svm_polynomial$best.parameters$degree,
kernel = "polynomial",
probability = TRUE)
svm_poly_test <- predict(svm_poly, auto_fit_test, probability = TRUE)
roc_poly <- data.frame(
estimate = svm_poly_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_poly_test,"probabilities")[, "1"],
Modelo = "Polinomial")
head(roc_poly)
svm_poly <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_polynomial$best.parameters$cost,
degree = tune_svm_polynomial$best.parameters$degree,
kernel = "polynomial",
probability = TRUE)
svm_poly_test <- predict(svm_poly, auto_fit_test, probability = TRUE)
roc_poly <- data.frame(
estimate = svm_poly_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_poly_test,"probabilities")[, "1"],
Modelo = "Polinomial")
head(roc_poly)
svm_radial <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_radial$best.parameters$cost,
gamma = tune_svm_radial$best.parameters$gamma,
kernel = "radial",
probability = TRUE)
svm_radial_test <- predict(svm_radial, auto_fit_test, probability = TRUE)
roc_radial <- data.frame(
estimate = svm_radial_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_radial_test,"probabilities")[, "1"],
Modelo = "Radial")
svm_radial <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_radial$best.parameters$cost,
gamma = tune_svm_radial$best.parameters$gamma,
kernel = "radial",
probability = TRUE)
svm_radial_test <- predict(svm_radial, auto_fit_test, probability = TRUE)
roc_radial <- data.frame(
estimate = svm_radial_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_radial_test,"probabilities")[, "1"],
Modelo = "Radial")
head(roc_radial)
svm_radial <- svm(mpg01 ~ .,
data = auto_fit_train,
cost = tune_svm_radial$best.parameters$cost,
gamma = tune_svm_radial$best.parameters$gamma,
kernel = "radial",
probability = TRUE)
svm_radial_test <- predict(svm_radial, auto_fit_test, probability = TRUE)
roc_radial <- data.frame(
estimate = svm_radial_test,
truth = auto_fit_test$mpg01,
prob = attr(svm_radial_test,"probabilities")[, "1"],
Modelo = "Radial")
head(roc_radial)
roc_merge <- rbind(roc_linear, roc_poly, roc_radial)
roc_merge %>%
group_by(Modelo) %>%
roc_curve(truth, prob) %>%
autoplot() +
labs(title = "Curvas ROC")
roc_merge %>%
group_by(Modelo) %>%
roc_auc(truth, prob)
setwd("D:/Documentos/TDG/asteroids_agent/info")
data_results <- fread("results.csv", encoding = "UTF-8") %>%
as_tibble()
library(tidyverse)
library(plotly)
library(ggthemes)
library(data.table)
data_results <- fread("results.csv", encoding = "UTF-8") %>%
as_tibble()
library(tidyverse)
library(plotly)
library(ggthemes)
library(data.table)
data_results <- fread("results.csv", encoding = "UTF-8") %>%
as_tibble()
View(data_results)
data_results %>%
dplyr::select(-V1, -epoch, -n_episodes) %>%
summary()
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_q_value)) +
labs(x = "Epoch", y = "Avg Q-value", title = "Avg Q-value per epoch")
ggplotly(g)
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_reward)) +
labs(x = "Epoch", y = "Avg Reward", title = "Avg Reward per epoch")
ggplotly(g)
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_score)) +
labs(x = "Epoch", y = "Avg Score", title = "Avg Score per epoch")
ggplotly(g)
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_q_value)) +
labs(x = "Epoch", y = "Avg Q-value", title = "Avg Q-value per epoch")
ggplotly(g)
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_reward)) +
labs(x = "Epoch", y = "Avg Reward", title = "Avg Reward per epoch")
ggplotly(g)
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_score)) +
labs(x = "Epoch", y = "Avg Score", title = "Avg Score per epoch")
ggplotly(g)
data_results %>%
dplyr::select(-V1, -epoch, -n_episodes) %>%
summary()
setwd("D:/Documentos/TDG/asteroids_agent/info")
library(tidyverse)
library(plotly)
library(ggthemes)
library(data.table)
data_results <- fread("results.csv", encoding = "UTF-8") %>%
as_tibble()
data_results %>%
dplyr::select(-V1, -epoch, -n_episodes) %>%
summary()
data_results %>%
dplyr::select(-V1, -epoch, -n_episodes) %>%
summary()
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_reward)) +
labs(x = "Epoch", y = "Avg Reward", title = "Avg Reward per epoch")
ggplotly(g)
g <- ggplot(data = data_results) +
geom_line(mapping = aes(x = epoch, y = avg_score)) +
labs(x = "Epoch", y = "Avg Score", title = "Avg Score per epoch")
ggplotly(g)
setwd("D:/Documentos/TDG/asteroids_agent/info")
setwd("D:/Documentos/TDG/asteroids_agent/info")
setwd("D:/Documentos/TDG/asteroids_agent/info")
setwd("D:/Documentos/TDG/breakout_agent/info")
setwd("D:/Documentos/TDG/breakout_agent_action_limit/info")
setwd("D:/Documentos/TDG/breakout_agent_final_security_copy/info")
library(tidyverse)
library(plotly)
library(ggthemes)
library(data.table)
data_results <- fread("results.csv", encoding = "UTF-8") %>%
as_tibble()
View(data_results)
View(data_results)
setwd("D:/Documentos/TDG/asteroids_agent_cuda_c_wrappers/info")
library(tidyverse)
library(plotly)
library(ggthemes)
library(data.table)
data_results <- fread("results.csv", encoding = "UTF-8") %>%
as_tibble()
View(data_results)
